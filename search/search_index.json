{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0422\u0440\u0435\u0442\u044c\u044f\u043a\u043e\u0432\u043e\u0439 \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u044b K33422","title":"\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e"},{"location":"#web-2022","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022"},{"location":"#k33422","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0422\u0440\u0435\u0442\u044c\u044f\u043a\u043e\u0432\u043e\u0439 \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u044b K33422"},{"location":"lr1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( \"127.0.0.1\" , 14900 )) sock . listen ( 2 ) while True : try : con , addr = sock . accept () data = con . recv ( 16384 ) udata = data . decode ( \"utf-8\" ) print ( udata ) con . send ( b \"Hello, client\" ) finally : sock . close () break client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( \"127.0.0.1\" , 14900 )) sock . send ( b \"Hello, server \\n \" ) text = sock . recv ( 16384 ) udata = text . decode ( \"utf-8\" ) print ( udata ) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 server.py import socket import math sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( \"127.0.0.1\" , 14900 )) sock . listen ( 2 ) while True : try : con , addr = sock . accept () s = con . recv ( 1024 ) s = s . decode ( \"utf8\" ) s = s . split () a = int ( s [ 0 ]) b = int ( s [ 1 ]) c = int ( s [ 2 ]) d = ( pow ( b , 2 ) - 4 * a * c ) if d == 0 : x = ( - b / ( 2 * a )) con . send ( b \"x = \" + str ( x ) . encode ( \"utf-8\" )) elif d < 0 : con . send ( \"\u041d\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439\" . encode ( \"utf-8\" )) elif d > 0 : x1 = ( - b - math . sqrt ( d )) / ( 2 * a ) x2 = ( - b + math . sqrt ( d )) / ( 2 * a ) con . send ( b \"x1 = \" + str ( x1 ) . encode ( \"utf-8\" ) + b \" x2 = \" + str ( x2 ) . encode ( \"utf-8\" )) finally : sock . close () break client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) a = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 x^2:\" ) b = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 x:\" ) c = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0435\u0442\u0438\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442:\" ) s = a + \" \" + b + \" \" + c sock . connect (( \"127.0.0.1\" , 14900 )) sock . send ( s . encode ( \"utf-8\" )) text = sock . recv ( 16384 ) udata = text . decode ( \"utf-8\" ) print ( udata ) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = '127.0.0.1' port = 333 sock . bind (( host , port )) sock . listen ( 5 ) while True : client , addr = sock . accept () print ( '\u041f\u043e\u043b\u0443\u0447\u0438\u043b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442:' , addr ) client . recv ( 1024 ) resp_type = 'HTTP/1.0 200 OK \\n ' resp_headers = 'Content-Type: text/html \\n\\n ' resp_body = \"\"\" <html> <body> <h1>Hello, client! It's a nice day to die</h1> </body> </html> \"\"\" response = resp_type + resp_headers + resp_body client . send ( response . encode ( 'utf-8' )) client . close () break \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 server.py import socket from threading import Thread host = \"127.0.0.1\" port = 334 clients = set () sock = socket . socket () sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) sock . bind (( host , port )) sock . listen ( 5 ) def listen_for_client ( cl ): while True : try : message = cl . recv ( 1024 ) . decode () except Exception as e : print ( f \"[!] \u041e\u0448\u0438\u0431\u043a\u0430: { e } \" ) clients . remove ( cl ) else : message = message . replace ( \" \" , \": \" ) for client in clients : client . send ( message . encode ()) while True : client , address = sock . accept () print ( f \" { address } \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d.\" ) clients . add ( client ) thread = Thread ( target = listen_for_client , args = ( client ,)) thread . daemon = True thread . start () client.py import socket import random from threading import Thread host = \"127.0.0.1\" port = 334 separator_token = \" \" sock = socket . socket () sock . connect (( host , port )) print ( f \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a { host } : { port } \" ) name = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0432\u043e\u0451 \u0438\u043c\u044f: \" ) def listen_for_messages (): while True : message = sock . recv ( 1024 ) . decode () print ( \" \\n \" + message ) thread = Thread ( target = listen_for_messages ) #thread.daemon = True thread . start () while True : text = input () if text . lower () == 'exit' : break text = f \" { name }{ separator_token }{ text } \" sock . send ( text . encode ()) sock . close () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 server.py import socket import sys class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) conn . bind (( self . host , self . port )) conn . listen ( 10 ) while True : client , address = conn . accept () self . serve_client ( client ) def serve_client ( self , client ): text = client . recv ( 16384 ) text = text . decode ( 'utf-8' ) # change url , method , headers , body = self . parse_request ( text ) resp = self . handle_request ( url , method , body ) if resp : self . send_response ( client , resp ) def parse_request ( self , text ): text = text . replace ( ' \\r ' , '' ) lines = text . split ( ' \\n ' ) method , url , protocol = lines [ 0 ] . split () i = lines . index ( '' ) headers = lines [ 1 : i ] body = lines [ - 1 ] # exception return url , method , headers , body def handle_request ( self , url , method , body ): resp = \"HTTP/1.1 200 OK \\n\\n \" error = f \" 400 \\n\\n Erorr\" if method == 'GET' and url == '/' : with open ( 'index.html' , 'r' ) as f : #change resp += f . read () return resp elif Exception : return error if method == \"POST\" and url == '/' : newbody = body . split ( '&' ) for i in newbody : if i . split ( '=' )[ 0 ] == 'subject' : subjects . append ( i . split ( '=' )[ 1 ]) if i . split ( '=' )[ 0 ] == 'mark' : marks . append ( i . split ( '=' )[ 1 ]) resp += \"<html><head><title>Journal</title></head><body><table border=1>\" for s , m in zip ( subjects , marks ): resp += f \"<tr><td> { s } </td><td> { m } </td></tr>\" resp += \"</table></body></html>\" return resp elif Exception : return error def send_response ( self , clientsocket , resp ): clientsocket . send ( resp . encode ( 'utf-8' )) if __name__ == '__main__' : host = '127.0.0.1' port = 3000 serv = MyHTTPServer ( host , port ) subjects = [] marks = [] try : serv . serve_forever () except KeyboardInterrupt : pass index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lr1/#no1_1","text":"server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( \"127.0.0.1\" , 14900 )) sock . listen ( 2 ) while True : try : con , addr = sock . accept () data = con . recv ( 16384 ) udata = data . decode ( \"utf-8\" ) print ( udata ) con . send ( b \"Hello, client\" ) finally : sock . close () break client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( \"127.0.0.1\" , 14900 )) sock . send ( b \"Hello, server \\n \" ) text = sock . recv ( 16384 ) udata = text . decode ( \"utf-8\" ) print ( udata )","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"lr1/#no2","text":"server.py import socket import math sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . bind (( \"127.0.0.1\" , 14900 )) sock . listen ( 2 ) while True : try : con , addr = sock . accept () s = con . recv ( 1024 ) s = s . decode ( \"utf8\" ) s = s . split () a = int ( s [ 0 ]) b = int ( s [ 1 ]) c = int ( s [ 2 ]) d = ( pow ( b , 2 ) - 4 * a * c ) if d == 0 : x = ( - b / ( 2 * a )) con . send ( b \"x = \" + str ( x ) . encode ( \"utf-8\" )) elif d < 0 : con . send ( \"\u041d\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439\" . encode ( \"utf-8\" )) elif d > 0 : x1 = ( - b - math . sqrt ( d )) / ( 2 * a ) x2 = ( - b + math . sqrt ( d )) / ( 2 * a ) con . send ( b \"x1 = \" + str ( x1 ) . encode ( \"utf-8\" ) + b \" x2 = \" + str ( x2 ) . encode ( \"utf-8\" )) finally : sock . close () break client.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) a = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 x^2:\" ) b = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 x:\" ) c = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0435\u0442\u0438\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442:\" ) s = a + \" \" + b + \" \" + c sock . connect (( \"127.0.0.1\" , 14900 )) sock . send ( s . encode ( \"utf-8\" )) text = sock . recv ( 16384 ) udata = text . decode ( \"utf-8\" ) print ( udata )","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"lr1/#no3","text":"server.py import socket sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) host = '127.0.0.1' port = 333 sock . bind (( host , port )) sock . listen ( 5 ) while True : client , addr = sock . accept () print ( '\u041f\u043e\u043b\u0443\u0447\u0438\u043b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442:' , addr ) client . recv ( 1024 ) resp_type = 'HTTP/1.0 200 OK \\n ' resp_headers = 'Content-Type: text/html \\n\\n ' resp_body = \"\"\" <html> <body> <h1>Hello, client! It's a nice day to die</h1> </body> </html> \"\"\" response = resp_type + resp_headers + resp_body client . send ( response . encode ( 'utf-8' )) client . close () break","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"lr1/#no4","text":"server.py import socket from threading import Thread host = \"127.0.0.1\" port = 334 clients = set () sock = socket . socket () sock . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) sock . bind (( host , port )) sock . listen ( 5 ) def listen_for_client ( cl ): while True : try : message = cl . recv ( 1024 ) . decode () except Exception as e : print ( f \"[!] \u041e\u0448\u0438\u0431\u043a\u0430: { e } \" ) clients . remove ( cl ) else : message = message . replace ( \" \" , \": \" ) for client in clients : client . send ( message . encode ()) while True : client , address = sock . accept () print ( f \" { address } \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d.\" ) clients . add ( client ) thread = Thread ( target = listen_for_client , args = ( client ,)) thread . daemon = True thread . start () client.py import socket import random from threading import Thread host = \"127.0.0.1\" port = 334 separator_token = \" \" sock = socket . socket () sock . connect (( host , port )) print ( f \"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a { host } : { port } \" ) name = input ( \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0432\u043e\u0451 \u0438\u043c\u044f: \" ) def listen_for_messages (): while True : message = sock . recv ( 1024 ) . decode () print ( \" \\n \" + message ) thread = Thread ( target = listen_for_messages ) #thread.daemon = True thread . start () while True : text = input () if text . lower () == 'exit' : break text = f \" { name }{ separator_token }{ text } \" sock . send ( text . encode ()) sock . close ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"lr1/#no5","text":"server.py import socket import sys class MyHTTPServer : def __init__ ( self , host , port ): self . host = host self . port = port def serve_forever ( self ): conn = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) conn . bind (( self . host , self . port )) conn . listen ( 10 ) while True : client , address = conn . accept () self . serve_client ( client ) def serve_client ( self , client ): text = client . recv ( 16384 ) text = text . decode ( 'utf-8' ) # change url , method , headers , body = self . parse_request ( text ) resp = self . handle_request ( url , method , body ) if resp : self . send_response ( client , resp ) def parse_request ( self , text ): text = text . replace ( ' \\r ' , '' ) lines = text . split ( ' \\n ' ) method , url , protocol = lines [ 0 ] . split () i = lines . index ( '' ) headers = lines [ 1 : i ] body = lines [ - 1 ] # exception return url , method , headers , body def handle_request ( self , url , method , body ): resp = \"HTTP/1.1 200 OK \\n\\n \" error = f \" 400 \\n\\n Erorr\" if method == 'GET' and url == '/' : with open ( 'index.html' , 'r' ) as f : #change resp += f . read () return resp elif Exception : return error if method == \"POST\" and url == '/' : newbody = body . split ( '&' ) for i in newbody : if i . split ( '=' )[ 0 ] == 'subject' : subjects . append ( i . split ( '=' )[ 1 ]) if i . split ( '=' )[ 0 ] == 'mark' : marks . append ( i . split ( '=' )[ 1 ]) resp += \"<html><head><title>Journal</title></head><body><table border=1>\" for s , m in zip ( subjects , marks ): resp += f \"<tr><td> { s } </td><td> { m } </td></tr>\" resp += \"</table></body></html>\" return resp elif Exception : return error def send_response ( self , clientsocket , resp ): clientsocket . send ( resp . encode ( 'utf-8' )) if __name__ == '__main__' : host = '127.0.0.1' port = 3000 serv = MyHTTPServer ( host , port ) subjects = [] marks = [] try : serv . serve_forever () except KeyboardInterrupt : pass index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Journal </ title > </ head > < body > < form action = \"/\" method = \"post\" > < div > < label for = \"name\" > Subject: </ label > < input type = \"text\" id = \"name\" name = \"subject\" /> </ div > < div > < label for = \"mail\" > Mark: </ label > < input type = \"number\" id = \"mail\" name = \"mark\" /> </ div > < div > < input type = \"submit\" > </ div > </ body > </ html >","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"lr2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0443\u0440\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b \u0424\u0430\u0439\u043b\u044b models.py \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432: \u0442\u0443\u0440\u0438\u0441\u0442, \u0442\u0443\u0440, \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u043e, \u0441\u0442\u0440\u0430\u043d\u0430, \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439; \u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 from django.db import models from django.db.models.base import Model from django.db.models.deletion import CASCADE from django.contrib.auth.models import AbstractUser from django.contrib.auth import get_user_model class Tourist ( AbstractUser ): username = models . CharField ( max_length = 20 , unique = True ) first_name = models . CharField ( max_length = 20 , null = True ) last_name = models . CharField ( max_length = 20 , null = True ) password = models . CharField ( max_length = 100 , null = True ) def __str__ ( self ): return str ( self . first_name ) Tourist = get_user_model () class Agency ( models . Model ): name = models . CharField ( max_length = 20 ) def __str__ ( self ): return str ( self . name ) class Country ( models . Model ): name = models . CharField ( max_length = 20 ) def __str__ ( self ): return str ( self . name ) class Tour ( models . Model ): name = models . CharField ( max_length = 20 ) description = models . TextField () agency_id = models . ForeignKey ( Agency , on_delete = CASCADE ) beginning_date = models . DateTimeField () ending_date = models . DateTimeField () country = models . ForeignKey ( Country , on_delete = CASCADE , null = True ) price = models . IntegerField ( null = True ) def __str__ ( self ): return str ( self . name ) class Reservation ( models . Model ): tourist_id = models . ForeignKey ( Tourist , on_delete = CASCADE ) tour_id = models . ForeignKey ( Tour , on_delete = CASCADE ) def __str__ ( self ): return str ( self . tour_id ) class Comment ( models . Model ): tourist_id = models . ForeignKey ( Tourist , on_delete = CASCADE ) tour_id = models . ForeignKey ( Tour , on_delete = CASCADE ) title = models . CharField ( max_length = 50 , null = True ) text = models . TextField () beginning_date = models . DateField ( null = True ) ending_date = models . DateField ( null = True ) rating = (( '1' , '1' ), ( '2' , '2' ), ( '3' , '3' ), ( '4' , '4' ), ( '5' , '5' ), ( '6' , '6' ), ( '7' , '7' ), ( '8' , '8' ), ( '9' , '9' ), ( '10' , '10' )) rate = models . CharField ( max_length = 30 , choices = rating ) def __str__ ( self ): return str ( self . title ) views.py \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 from typing import List from django.shortcuts import render , redirect from django.http import Http404 , HttpResponse from django.contrib.auth import authenticate , login , logout from django.views.generic.list import ListView from django.views.generic.edit import CreateView , DeleteView , UpdateView from .models import Country , Tourist , Tour , Reservation , Comment from .forms import LoginForm , UserRegistrationForm def show_tour ( request , tour_id ): try : tour = Tour . objects . get ( pk = tour_id ) comments = Comment . objects . filter ( tour_id = tour ) except Tour . DoesNotExist : raise Http404 return render ( request , 'tour.html' , { 'tour' : tour , 'comments' : comments }) class All_Tours ( ListView ): model = Tour template_name = 'all_tour.html' @staticmethod def all_countries (): return Country . objects . all () class All_Tours_Registered ( ListView ): model = Tour template_name = 'tour_registered.html' @staticmethod def all_countries (): return Country . objects . all () def tours_registered ( request , tour_id ): try : tour = Tour . objects . get ( pk = tour_id ) comments = Comment . objects . filter ( tour_id = tour ) except Tour . DoesNotExist : raise Http404 return render ( request , 'all_tour_registered.html' , { 'tour' : tour , 'comments' : comments }) def tour_filter_registered ( request , pk ): tours = Tour . objects . all () . filter ( country_id = pk ) return render ( request , 'filter.html' , { 'tours' : tours }) def tour_filter ( request , pk ): tours = Tour . objects . all () . filter ( country_id = pk ) return render ( request , 'filter_nr.html' , { 'tours' : tours }) class Tourist_Page ( ListView ): model = Tourist template_name = 'tourist_page.html' class All_Reservations ( ListView ): model = Reservation template_name = 'all_reservation.html' class Make_Reservation ( CreateView ): model = Reservation template_name = 'reservation_create.html' fields = [ 'tourist_id' , 'tour_id' ] success_url = '/home/registered' class Edit_Reservation ( UpdateView ): model = Reservation template_name = 'reservation_edit.html' fields = [ 'tourist_id' , 'tour_id' ] success_url = '/home/registered' class Delete_Reservation ( DeleteView ): model = Reservation template_name = 'reservation_delete.html' success_url = '/home/registered' class All_Comments ( ListView ): model = Comment template_name = 'all_comment.html' class All_Comments_Registered ( ListView ): model = Comment template_name = 'all_comment_registered.html' class Leave_Comment ( CreateView ): model = Comment template_name = 'comment.html' fields = [ 'tourist_id' , 'tour_id' , 'text' , 'rate' ] success_url = '/tour/registered' class Home ( ListView ): model = Tour template_name = 'home.html' def register ( request ): if request . method == 'POST' : user_form = UserRegistrationForm ( request . POST ) if user_form . is_valid (): # Create a new user object but avoid saving it yet new_user = user_form . save ( commit = False ) # Set the chosen password new_user . set_password ( user_form . cleaned_data [ 'password' ]) # Save the User object new_user . save () return render ( request , 'account/register_done.html' , { 'new_user' : new_user }) else : user_form = UserRegistrationForm () return render ( request , 'account/register.html' , { 'user_form' : user_form }) def user_login ( request ): if request . method == 'POST' : form = LoginForm ( request . POST ) if form . is_valid (): cd = form . cleaned_data user = authenticate ( username = cd [ 'username' ], password = cd [ 'password' ]) if user is not None : if user . is_active : login ( request , user ) return redirect ( '/home/registered' ) else : return HttpResponse ( 'Disabled account' ) else : return HttpResponse ( 'Invalid login' ) else : form = LoginForm () return render ( request , 'account/login.html' , { 'form' : form }) def logout_user ( request ): logout ( request ) return redirect ( '/home/' ) urls.py \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a from django.urls import path from . import views urlpatterns = [ path ( 'tour/<int:tour_id>' , views . show_tour ), path ( 'tour/registered/<int:tour_id>' , views . tours_registered ), path ( 'tour/registered' , views . All_Tours_Registered . as_view ()), path ( 'tour/' , views . All_Tours . as_view ()), path ( 'reservation_create/' , views . Make_Reservation . as_view ()), path ( 'tour/<int:tour_id>/new_comment' , views . Leave_Comment . as_view ()), path ( 'reservation/<int:pk>/edit/' , views . Edit_Reservation . as_view ()), path ( 'tour/<int:tour_id>/comments/' , views . All_Comments . as_view ()), path ( 'reservation/<int:pk>/delete/' , views . Delete_Reservation . as_view ()), path ( 'accounts/register/' , views . register ), path ( 'accounts/login/' , views . user_login ), path ( 'home/' , views . Home . as_view ()), path ( 'home/registered/' , views . Tourist_Page . as_view ()), path ( 'home/<int:tourist_id>/reservation' , views . All_Reservations . as_view ()), path ( 'accounts/logout' , views . logout_user ), path ( 'tour/registered/<int:tour_id>/comments/' , views . All_Comments_Registered . as_view ()), path ( 'filter/registered/<int:pk>' , views . tour_filter_registered ), path ( 'filter/<int:pk>' , views . tour_filter ) ] forms.py \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u043e\u0440\u043c: \u0432\u0445\u043e\u0434, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0437\u0430\u0431\u044b\u0442\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c from django import forms from .models import Tourist class LoginForm ( forms . Form ): username = forms . CharField () password = forms . CharField ( widget = forms . PasswordInput ) class UserRegistrationForm ( forms . ModelForm ): password = forms . CharField ( label = 'Password' , widget = forms . PasswordInput ) password2 = forms . CharField ( label = 'Repeat password' , widget = forms . PasswordInput ) class Meta : model = Tourist fields = ( 'username' , 'first_name' , 'email' ) def clean_password2 ( self ): cd = self . cleaned_data if cd [ 'password' ] != cd [ 'password2' ]: raise forms . ValidationError ( 'Passwords don \\' t match.' ) return cd [ 'password2' ] \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043a\u0440\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0412\u0445\u043e\u0434 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0422\u0443\u0440\u044b \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lr2/#_1","text":"\u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u0442\u0443\u0440\u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0435, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0443\u0440\u0430, \u043f\u0435\u0440\u0438\u043e\u0434\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0442\u0443\u0440\u0430, \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043e\u043f\u043b\u0430\u0442\u044b. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0442\u0443\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0443\u0440\u044b \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u044b","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr2/#_2","text":"models.py \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432: \u0442\u0443\u0440\u0438\u0441\u0442, \u0442\u0443\u0440, \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u043e, \u0441\u0442\u0440\u0430\u043d\u0430, \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439; \u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 from django.db import models from django.db.models.base import Model from django.db.models.deletion import CASCADE from django.contrib.auth.models import AbstractUser from django.contrib.auth import get_user_model class Tourist ( AbstractUser ): username = models . CharField ( max_length = 20 , unique = True ) first_name = models . CharField ( max_length = 20 , null = True ) last_name = models . CharField ( max_length = 20 , null = True ) password = models . CharField ( max_length = 100 , null = True ) def __str__ ( self ): return str ( self . first_name ) Tourist = get_user_model () class Agency ( models . Model ): name = models . CharField ( max_length = 20 ) def __str__ ( self ): return str ( self . name ) class Country ( models . Model ): name = models . CharField ( max_length = 20 ) def __str__ ( self ): return str ( self . name ) class Tour ( models . Model ): name = models . CharField ( max_length = 20 ) description = models . TextField () agency_id = models . ForeignKey ( Agency , on_delete = CASCADE ) beginning_date = models . DateTimeField () ending_date = models . DateTimeField () country = models . ForeignKey ( Country , on_delete = CASCADE , null = True ) price = models . IntegerField ( null = True ) def __str__ ( self ): return str ( self . name ) class Reservation ( models . Model ): tourist_id = models . ForeignKey ( Tourist , on_delete = CASCADE ) tour_id = models . ForeignKey ( Tour , on_delete = CASCADE ) def __str__ ( self ): return str ( self . tour_id ) class Comment ( models . Model ): tourist_id = models . ForeignKey ( Tourist , on_delete = CASCADE ) tour_id = models . ForeignKey ( Tour , on_delete = CASCADE ) title = models . CharField ( max_length = 50 , null = True ) text = models . TextField () beginning_date = models . DateField ( null = True ) ending_date = models . DateField ( null = True ) rating = (( '1' , '1' ), ( '2' , '2' ), ( '3' , '3' ), ( '4' , '4' ), ( '5' , '5' ), ( '6' , '6' ), ( '7' , '7' ), ( '8' , '8' ), ( '9' , '9' ), ( '10' , '10' )) rate = models . CharField ( max_length = 30 , choices = rating ) def __str__ ( self ): return str ( self . title ) views.py \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 from typing import List from django.shortcuts import render , redirect from django.http import Http404 , HttpResponse from django.contrib.auth import authenticate , login , logout from django.views.generic.list import ListView from django.views.generic.edit import CreateView , DeleteView , UpdateView from .models import Country , Tourist , Tour , Reservation , Comment from .forms import LoginForm , UserRegistrationForm def show_tour ( request , tour_id ): try : tour = Tour . objects . get ( pk = tour_id ) comments = Comment . objects . filter ( tour_id = tour ) except Tour . DoesNotExist : raise Http404 return render ( request , 'tour.html' , { 'tour' : tour , 'comments' : comments }) class All_Tours ( ListView ): model = Tour template_name = 'all_tour.html' @staticmethod def all_countries (): return Country . objects . all () class All_Tours_Registered ( ListView ): model = Tour template_name = 'tour_registered.html' @staticmethod def all_countries (): return Country . objects . all () def tours_registered ( request , tour_id ): try : tour = Tour . objects . get ( pk = tour_id ) comments = Comment . objects . filter ( tour_id = tour ) except Tour . DoesNotExist : raise Http404 return render ( request , 'all_tour_registered.html' , { 'tour' : tour , 'comments' : comments }) def tour_filter_registered ( request , pk ): tours = Tour . objects . all () . filter ( country_id = pk ) return render ( request , 'filter.html' , { 'tours' : tours }) def tour_filter ( request , pk ): tours = Tour . objects . all () . filter ( country_id = pk ) return render ( request , 'filter_nr.html' , { 'tours' : tours }) class Tourist_Page ( ListView ): model = Tourist template_name = 'tourist_page.html' class All_Reservations ( ListView ): model = Reservation template_name = 'all_reservation.html' class Make_Reservation ( CreateView ): model = Reservation template_name = 'reservation_create.html' fields = [ 'tourist_id' , 'tour_id' ] success_url = '/home/registered' class Edit_Reservation ( UpdateView ): model = Reservation template_name = 'reservation_edit.html' fields = [ 'tourist_id' , 'tour_id' ] success_url = '/home/registered' class Delete_Reservation ( DeleteView ): model = Reservation template_name = 'reservation_delete.html' success_url = '/home/registered' class All_Comments ( ListView ): model = Comment template_name = 'all_comment.html' class All_Comments_Registered ( ListView ): model = Comment template_name = 'all_comment_registered.html' class Leave_Comment ( CreateView ): model = Comment template_name = 'comment.html' fields = [ 'tourist_id' , 'tour_id' , 'text' , 'rate' ] success_url = '/tour/registered' class Home ( ListView ): model = Tour template_name = 'home.html' def register ( request ): if request . method == 'POST' : user_form = UserRegistrationForm ( request . POST ) if user_form . is_valid (): # Create a new user object but avoid saving it yet new_user = user_form . save ( commit = False ) # Set the chosen password new_user . set_password ( user_form . cleaned_data [ 'password' ]) # Save the User object new_user . save () return render ( request , 'account/register_done.html' , { 'new_user' : new_user }) else : user_form = UserRegistrationForm () return render ( request , 'account/register.html' , { 'user_form' : user_form }) def user_login ( request ): if request . method == 'POST' : form = LoginForm ( request . POST ) if form . is_valid (): cd = form . cleaned_data user = authenticate ( username = cd [ 'username' ], password = cd [ 'password' ]) if user is not None : if user . is_active : login ( request , user ) return redirect ( '/home/registered' ) else : return HttpResponse ( 'Disabled account' ) else : return HttpResponse ( 'Invalid login' ) else : form = LoginForm () return render ( request , 'account/login.html' , { 'form' : form }) def logout_user ( request ): logout ( request ) return redirect ( '/home/' ) urls.py \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043e\u043a from django.urls import path from . import views urlpatterns = [ path ( 'tour/<int:tour_id>' , views . show_tour ), path ( 'tour/registered/<int:tour_id>' , views . tours_registered ), path ( 'tour/registered' , views . All_Tours_Registered . as_view ()), path ( 'tour/' , views . All_Tours . as_view ()), path ( 'reservation_create/' , views . Make_Reservation . as_view ()), path ( 'tour/<int:tour_id>/new_comment' , views . Leave_Comment . as_view ()), path ( 'reservation/<int:pk>/edit/' , views . Edit_Reservation . as_view ()), path ( 'tour/<int:tour_id>/comments/' , views . All_Comments . as_view ()), path ( 'reservation/<int:pk>/delete/' , views . Delete_Reservation . as_view ()), path ( 'accounts/register/' , views . register ), path ( 'accounts/login/' , views . user_login ), path ( 'home/' , views . Home . as_view ()), path ( 'home/registered/' , views . Tourist_Page . as_view ()), path ( 'home/<int:tourist_id>/reservation' , views . All_Reservations . as_view ()), path ( 'accounts/logout' , views . logout_user ), path ( 'tour/registered/<int:tour_id>/comments/' , views . All_Comments_Registered . as_view ()), path ( 'filter/registered/<int:pk>' , views . tour_filter_registered ), path ( 'filter/<int:pk>' , views . tour_filter ) ] forms.py \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0444\u043e\u0440\u043c: \u0432\u0445\u043e\u0434, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0437\u0430\u0431\u044b\u0442\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c from django import forms from .models import Tourist class LoginForm ( forms . Form ): username = forms . CharField () password = forms . CharField ( widget = forms . PasswordInput ) class UserRegistrationForm ( forms . ModelForm ): password = forms . CharField ( label = 'Password' , widget = forms . PasswordInput ) password2 = forms . CharField ( label = 'Repeat password' , widget = forms . PasswordInput ) class Meta : model = Tourist fields = ( 'username' , 'first_name' , 'email' ) def clean_password2 ( self ): cd = self . cleaned_data if cd [ 'password' ] != cd [ 'password2' ]: raise forms . ValidationError ( 'Passwords don \\' t match.' ) return cd [ 'password2' ]","title":"\u0424\u0430\u0439\u043b\u044b"},{"location":"lr2/#_3","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0412\u0445\u043e\u0434 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0422\u0443\u0440\u044b \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0435\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c","title":"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043a\u0440\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:"}]}